/**
 * Locationforecast
 * Weather forecast for a specified place
 *
 * The version of the OpenAPI document: 2.0
 * Contact: weatherapi-adm@met.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package no.hvl.dat153.forecastfetcher.data;

import java.math.BigDecimal;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Weather parameters valid for a specified time period.
 **/
@ApiModel(description = "Weather parameters valid for a specified time period.")
public class ForecastTimePeriod {
  
  @SerializedName("air_temperature_max")
  private BigDecimal airTemperatureMax = null;
  @SerializedName("air_temperature_min")
  private BigDecimal airTemperatureMin = null;
  @SerializedName("precipitation_amount")
  private BigDecimal precipitationAmount = null;
  @SerializedName("precipitation_amount_max")
  private BigDecimal precipitationAmountMax = null;
  @SerializedName("precipitation_amount_min")
  private BigDecimal precipitationAmountMin = null;
  @SerializedName("probability_of_precipitation")
  private BigDecimal probabilityOfPrecipitation = null;
  @SerializedName("probability_of_thunder")
  private BigDecimal probabilityOfThunder = null;
  @SerializedName("ultraviolet_index_clear_sky_max")
  private BigDecimal ultravioletIndexClearSkyMax = null;

  /**
   * Maximum air temperature in period
   **/
  @ApiModelProperty(value = "Maximum air temperature in period")
  public BigDecimal getAirTemperatureMax() {
    return airTemperatureMax;
  }
  public void setAirTemperatureMax(BigDecimal airTemperatureMax) {
    this.airTemperatureMax = airTemperatureMax;
  }

  /**
   * Minimum air temperature in period
   **/
  @ApiModelProperty(value = "Minimum air temperature in period")
  public BigDecimal getAirTemperatureMin() {
    return airTemperatureMin;
  }
  public void setAirTemperatureMin(BigDecimal airTemperatureMin) {
    this.airTemperatureMin = airTemperatureMin;
  }

  /**
   * Best estimate for amount of precipitation for this period
   **/
  @ApiModelProperty(value = "Best estimate for amount of precipitation for this period")
  public BigDecimal getPrecipitationAmount() {
    return precipitationAmount;
  }
  public void setPrecipitationAmount(BigDecimal precipitationAmount) {
    this.precipitationAmount = precipitationAmount;
  }

  /**
   * Maximum amount of precipitation for this period
   **/
  @ApiModelProperty(value = "Maximum amount of precipitation for this period")
  public BigDecimal getPrecipitationAmountMax() {
    return precipitationAmountMax;
  }
  public void setPrecipitationAmountMax(BigDecimal precipitationAmountMax) {
    this.precipitationAmountMax = precipitationAmountMax;
  }

  /**
   * Minimum amount of precipitation for this period
   **/
  @ApiModelProperty(value = "Minimum amount of precipitation for this period")
  public BigDecimal getPrecipitationAmountMin() {
    return precipitationAmountMin;
  }
  public void setPrecipitationAmountMin(BigDecimal precipitationAmountMin) {
    this.precipitationAmountMin = precipitationAmountMin;
  }

  /**
   * Probability of any precipitation coming for this period
   **/
  @ApiModelProperty(value = "Probability of any precipitation coming for this period")
  public BigDecimal getProbabilityOfPrecipitation() {
    return probabilityOfPrecipitation;
  }
  public void setProbabilityOfPrecipitation(BigDecimal probabilityOfPrecipitation) {
    this.probabilityOfPrecipitation = probabilityOfPrecipitation;
  }

  /**
   * Probability of any thunder coming for this period
   **/
  @ApiModelProperty(value = "Probability of any thunder coming for this period")
  public BigDecimal getProbabilityOfThunder() {
    return probabilityOfThunder;
  }
  public void setProbabilityOfThunder(BigDecimal probabilityOfThunder) {
    this.probabilityOfThunder = probabilityOfThunder;
  }

  /**
   * Maximum ultraviolet index if sky is clear
   **/
  @ApiModelProperty(value = "Maximum ultraviolet index if sky is clear")
  public BigDecimal getUltravioletIndexClearSkyMax() {
    return ultravioletIndexClearSkyMax;
  }
  public void setUltravioletIndexClearSkyMax(BigDecimal ultravioletIndexClearSkyMax) {
    this.ultravioletIndexClearSkyMax = ultravioletIndexClearSkyMax;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastTimePeriod forecastTimePeriod = (ForecastTimePeriod) o;
    return (this.airTemperatureMax == null ? forecastTimePeriod.airTemperatureMax == null : this.airTemperatureMax.equals(forecastTimePeriod.airTemperatureMax)) &&
        (this.airTemperatureMin == null ? forecastTimePeriod.airTemperatureMin == null : this.airTemperatureMin.equals(forecastTimePeriod.airTemperatureMin)) &&
        (this.precipitationAmount == null ? forecastTimePeriod.precipitationAmount == null : this.precipitationAmount.equals(forecastTimePeriod.precipitationAmount)) &&
        (this.precipitationAmountMax == null ? forecastTimePeriod.precipitationAmountMax == null : this.precipitationAmountMax.equals(forecastTimePeriod.precipitationAmountMax)) &&
        (this.precipitationAmountMin == null ? forecastTimePeriod.precipitationAmountMin == null : this.precipitationAmountMin.equals(forecastTimePeriod.precipitationAmountMin)) &&
        (this.probabilityOfPrecipitation == null ? forecastTimePeriod.probabilityOfPrecipitation == null : this.probabilityOfPrecipitation.equals(forecastTimePeriod.probabilityOfPrecipitation)) &&
        (this.probabilityOfThunder == null ? forecastTimePeriod.probabilityOfThunder == null : this.probabilityOfThunder.equals(forecastTimePeriod.probabilityOfThunder)) &&
        (this.ultravioletIndexClearSkyMax == null ? forecastTimePeriod.ultravioletIndexClearSkyMax == null : this.ultravioletIndexClearSkyMax.equals(forecastTimePeriod.ultravioletIndexClearSkyMax));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.airTemperatureMax == null ? 0: this.airTemperatureMax.hashCode());
    result = 31 * result + (this.airTemperatureMin == null ? 0: this.airTemperatureMin.hashCode());
    result = 31 * result + (this.precipitationAmount == null ? 0: this.precipitationAmount.hashCode());
    result = 31 * result + (this.precipitationAmountMax == null ? 0: this.precipitationAmountMax.hashCode());
    result = 31 * result + (this.precipitationAmountMin == null ? 0: this.precipitationAmountMin.hashCode());
    result = 31 * result + (this.probabilityOfPrecipitation == null ? 0: this.probabilityOfPrecipitation.hashCode());
    result = 31 * result + (this.probabilityOfThunder == null ? 0: this.probabilityOfThunder.hashCode());
    result = 31 * result + (this.ultravioletIndexClearSkyMax == null ? 0: this.ultravioletIndexClearSkyMax.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastTimePeriod {\n");
    
    sb.append("  airTemperatureMax: ").append(airTemperatureMax).append("\n");
    sb.append("  airTemperatureMin: ").append(airTemperatureMin).append("\n");
    sb.append("  precipitationAmount: ").append(precipitationAmount).append("\n");
    sb.append("  precipitationAmountMax: ").append(precipitationAmountMax).append("\n");
    sb.append("  precipitationAmountMin: ").append(precipitationAmountMin).append("\n");
    sb.append("  probabilityOfPrecipitation: ").append(probabilityOfPrecipitation).append("\n");
    sb.append("  probabilityOfThunder: ").append(probabilityOfThunder).append("\n");
    sb.append("  ultravioletIndexClearSkyMax: ").append(ultravioletIndexClearSkyMax).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
