/**
 * Locationforecast
 * Weather forecast for a specified place
 *
 * The version of the OpenAPI document: 2.0
 * Contact: weatherapi-adm@met.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package no.hvl.dat153.forecastfetcher.utils;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.text.NumberFormat;
import java.util.List;
import java.util.Date;
import no.hvl.dat153.forecastfetcher.data.*;

public class ForecastUtils {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static float formatCoordinate(float coordinate){
    NumberFormat formatter = NumberFormat.getNumberInstance();
    formatter.setMaximumFractionDigits(4);
    String output = formatter.format(coordinate);

    return Float.parseFloat(output);

  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Forecast".equalsIgnoreCase(className)) {
      return new TypeToken<List<Forecast>>(){}.getType();
    }
    
    if ("ForecastMeta".equalsIgnoreCase(className)) {
      return new TypeToken<List<ForecastMeta>>(){}.getType();
    }
    
    if ("ForecastSummary".equalsIgnoreCase(className)) {
      return new TypeToken<List<ForecastSummary>>(){}.getType();
    }
    
    if ("ForecastTimeInstant".equalsIgnoreCase(className)) {
      return new TypeToken<List<ForecastTimeInstant>>(){}.getType();
    }
    
    if ("ForecastTimePeriod".equalsIgnoreCase(className)) {
      return new TypeToken<List<ForecastTimePeriod>>(){}.getType();
    }
    
    if ("ForecastTimeStep".equalsIgnoreCase(className)) {
      return new TypeToken<List<ForecastTimeStep>>(){}.getType();
    }
    
    if ("ForecastTimeStepData".equalsIgnoreCase(className)) {
      return new TypeToken<List<ForecastTimeStepData>>(){}.getType();
    }
    
    if ("ForecastTimeStepDataInstant".equalsIgnoreCase(className)) {
      return new TypeToken<List<ForecastTimeStepDataInstant>>(){}.getType();
    }
    
    if ("ForecastTimeStepDataNext12Hours".equalsIgnoreCase(className)) {
      return new TypeToken<List<ForecastTimeStepDataNext12Hours>>(){}.getType();
    }
    
    if ("ForecastTimeStepDataNext1Hours".equalsIgnoreCase(className)) {
      return new TypeToken<List<ForecastTimeStepDataNext1Hours>>(){}.getType();
    }
    
    if ("ForecastTimeStepDataNext6Hours".equalsIgnoreCase(className)) {
      return new TypeToken<List<ForecastTimeStepDataNext6Hours>>(){}.getType();
    }
    
    if ("ForecastUnits".equalsIgnoreCase(className)) {
      return new TypeToken<List<ForecastUnits>>(){}.getType();
    }
    
    if ("METJSONForecast".equalsIgnoreCase(className)) {
      return new TypeToken<List<METJSONForecast>>(){}.getType();
    }
    
    if ("PointGeometry".equalsIgnoreCase(className)) {
      return new TypeToken<List<PointGeometry>>(){}.getType();
    }
    
    if ("WeatherSymbol".equalsIgnoreCase(className)) {
      return new TypeToken<List<WeatherSymbol>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Forecast".equalsIgnoreCase(className)) {
      return new TypeToken<Forecast>(){}.getType();
    }
    
    if ("ForecastMeta".equalsIgnoreCase(className)) {
      return new TypeToken<ForecastMeta>(){}.getType();
    }
    
    if ("ForecastSummary".equalsIgnoreCase(className)) {
      return new TypeToken<ForecastSummary>(){}.getType();
    }
    
    if ("ForecastTimeInstant".equalsIgnoreCase(className)) {
      return new TypeToken<ForecastTimeInstant>(){}.getType();
    }
    
    if ("ForecastTimePeriod".equalsIgnoreCase(className)) {
      return new TypeToken<ForecastTimePeriod>(){}.getType();
    }
    
    if ("ForecastTimeStep".equalsIgnoreCase(className)) {
      return new TypeToken<ForecastTimeStep>(){}.getType();
    }
    
    if ("ForecastTimeStepData".equalsIgnoreCase(className)) {
      return new TypeToken<ForecastTimeStepData>(){}.getType();
    }
    
    if ("ForecastTimeStepDataInstant".equalsIgnoreCase(className)) {
      return new TypeToken<ForecastTimeStepDataInstant>(){}.getType();
    }
    
    if ("ForecastTimeStepDataNext12Hours".equalsIgnoreCase(className)) {
      return new TypeToken<ForecastTimeStepDataNext12Hours>(){}.getType();
    }
    
    if ("ForecastTimeStepDataNext1Hours".equalsIgnoreCase(className)) {
      return new TypeToken<ForecastTimeStepDataNext1Hours>(){}.getType();
    }
    
    if ("ForecastTimeStepDataNext6Hours".equalsIgnoreCase(className)) {
      return new TypeToken<ForecastTimeStepDataNext6Hours>(){}.getType();
    }
    
    if ("ForecastUnits".equalsIgnoreCase(className)) {
      return new TypeToken<ForecastUnits>(){}.getType();
    }
    
    if ("METJSONForecast".equalsIgnoreCase(className)) {
      return new TypeToken<METJSONForecast>(){}.getType();
    }
    
    if ("PointGeometry".equalsIgnoreCase(className)) {
      return new TypeToken<PointGeometry>(){}.getType();
    }
    
    if ("WeatherSymbol".equalsIgnoreCase(className)) {
      return new TypeToken<WeatherSymbol>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
