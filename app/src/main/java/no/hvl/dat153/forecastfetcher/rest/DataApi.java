/**
 * Locationforecast
 * Weather forecast for a specified place
 *
 * The version of the OpenAPI document: 2.0
 * Contact: weatherapi-adm@met.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package no.hvl.dat153.forecastfetcher.rest;

import no.hvl.dat153.forecastfetcher.utils.Pair;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import no.hvl.dat153.forecastfetcher.data.METJSONForecast;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DataApi {
  String basePath = "http://localhost/weatherapi/locationforecast/2.0";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Weather forecast for a specified place
   * @param lat Latitude
   * @param lon Longitude
   * @param format format code (file extension)
   * @param altitude Whole meters above sea level
   * @return String
  */
  public String classicFormatGet (Float lat, Float lon, String format, Integer altitude) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'lat' is set
    if (lat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lat' when calling classicFormatGet",
        new ApiException(400, "Missing the required parameter 'lat' when calling classicFormatGet"));
    }
    // verify the required parameter 'lon' is set
    if (lon == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lon' when calling classicFormatGet",
        new ApiException(400, "Missing the required parameter 'lon' when calling classicFormatGet"));
    }
    // verify the required parameter 'format' is set
    if (format == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'format' when calling classicFormatGet",
        new ApiException(400, "Missing the required parameter 'format' when calling classicFormatGet"));
    }

    // create path and map variables
    String path = "/classic.{format}".replaceAll("\\{" + "format" + "\\}", apiInvoker.escapeString(format.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "altitude", altitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lat", lat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lon", lon));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Weather forecast for a specified place
   * @param lat Latitude   * @param lon Longitude   * @param format format code (file extension)   * @param altitude Whole meters above sea level
  */
  public void classicFormatGet (Float lat, Float lon, String format, Integer altitude, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'lat' is set
    if (lat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lat' when calling classicFormatGet",
        new ApiException(400, "Missing the required parameter 'lat' when calling classicFormatGet"));
    }
    // verify the required parameter 'lon' is set
    if (lon == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lon' when calling classicFormatGet",
        new ApiException(400, "Missing the required parameter 'lon' when calling classicFormatGet"));
    }
    // verify the required parameter 'format' is set
    if (format == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'format' when calling classicFormatGet",
        new ApiException(400, "Missing the required parameter 'format' when calling classicFormatGet"));
    }

    // create path and map variables
    String path = "/classic.{format}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "format" + "\\}", apiInvoker.escapeString(format.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "altitude", altitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lat", lat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lon", lon));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Weather forecast for a specified place
   * @param lat Latitude
   * @param lon Longitude
   * @param altitude Whole meters above sea level
   * @return String
  */
  public String classicGet (Float lat, Float lon, Integer altitude) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'lat' is set
    if (lat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lat' when calling classicGet",
        new ApiException(400, "Missing the required parameter 'lat' when calling classicGet"));
    }
    // verify the required parameter 'lon' is set
    if (lon == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lon' when calling classicGet",
        new ApiException(400, "Missing the required parameter 'lon' when calling classicGet"));
    }

    // create path and map variables
    String path = "/classic";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "altitude", altitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lat", lat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lon", lon));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Weather forecast for a specified place
   * @param lat Latitude   * @param lon Longitude   * @param altitude Whole meters above sea level
  */
  public void classicGet (Float lat, Float lon, Integer altitude, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'lat' is set
    if (lat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lat' when calling classicGet",
        new ApiException(400, "Missing the required parameter 'lat' when calling classicGet"));
    }
    // verify the required parameter 'lon' is set
    if (lon == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lon' when calling classicGet",
        new ApiException(400, "Missing the required parameter 'lon' when calling classicGet"));
    }

    // create path and map variables
    String path = "/classic".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "altitude", altitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lat", lat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lon", lon));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Weather forecast for a specified place
   * @param lat Latitude
   * @param lon Longitude
   * @param format format code (file extension)
   * @param altitude Whole meters above sea level
   * @return METJSONForecast
  */
  public METJSONForecast compactFormatGet (Float lat, Float lon, String format, Integer altitude) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'lat' is set
    if (lat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lat' when calling compactFormatGet",
        new ApiException(400, "Missing the required parameter 'lat' when calling compactFormatGet"));
    }
    // verify the required parameter 'lon' is set
    if (lon == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lon' when calling compactFormatGet",
        new ApiException(400, "Missing the required parameter 'lon' when calling compactFormatGet"));
    }
    // verify the required parameter 'format' is set
    if (format == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'format' when calling compactFormatGet",
        new ApiException(400, "Missing the required parameter 'format' when calling compactFormatGet"));
    }

    // create path and map variables
    String path = "/compact.{format}".replaceAll("\\{" + "format" + "\\}", apiInvoker.escapeString(format.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "altitude", altitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lat", lat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lon", lon));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (METJSONForecast) ApiInvoker.deserialize(localVarResponse, "", METJSONForecast.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Weather forecast for a specified place
   * @param lat Latitude   * @param lon Longitude   * @param format format code (file extension)   * @param altitude Whole meters above sea level
  */
  public void compactFormatGet (Float lat, Float lon, String format, Integer altitude, final Response.Listener<METJSONForecast> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'lat' is set
    if (lat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lat' when calling compactFormatGet",
        new ApiException(400, "Missing the required parameter 'lat' when calling compactFormatGet"));
    }
    // verify the required parameter 'lon' is set
    if (lon == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lon' when calling compactFormatGet",
        new ApiException(400, "Missing the required parameter 'lon' when calling compactFormatGet"));
    }
    // verify the required parameter 'format' is set
    if (format == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'format' when calling compactFormatGet",
        new ApiException(400, "Missing the required parameter 'format' when calling compactFormatGet"));
    }

    // create path and map variables
    String path = "/compact.{format}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "format" + "\\}", apiInvoker.escapeString(format.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "altitude", altitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lat", lat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lon", lon));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((METJSONForecast) ApiInvoker.deserialize(localVarResponse,  "", METJSONForecast.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Weather forecast for a specified place
   * @param lat Latitude
   * @param lon Longitude
   * @param altitude Whole meters above sea level
   * @return METJSONForecast
  */
  public METJSONForecast compactGet (Float lat, Float lon, Integer altitude) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'lat' is set
    if (lat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lat' when calling compactGet",
        new ApiException(400, "Missing the required parameter 'lat' when calling compactGet"));
    }
    // verify the required parameter 'lon' is set
    if (lon == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lon' when calling compactGet",
        new ApiException(400, "Missing the required parameter 'lon' when calling compactGet"));
    }

    // create path and map variables
    String path = "/compact";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    headerParams.put("User-Agent","DAT153/1.0 https://www.hvl.no/en/studies-at-hvl/study-programmes/courses/dat153/");
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "altitude", altitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lat", lat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lon", lon));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (METJSONForecast) ApiInvoker.deserialize(localVarResponse, "", METJSONForecast.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Weather forecast for a specified place
   * @param lat Latitude   * @param lon Longitude   * @param altitude Whole meters above sea level
  */
  public void compactGet (Float lat, Float lon, Integer altitude, final Response.Listener<METJSONForecast> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'lat' is set
    if (lat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lat' when calling compactGet",
        new ApiException(400, "Missing the required parameter 'lat' when calling compactGet"));
    }
    // verify the required parameter 'lon' is set
    if (lon == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lon' when calling compactGet",
        new ApiException(400, "Missing the required parameter 'lon' when calling compactGet"));
    }

    // create path and map variables
    String path = "/compact".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "altitude", altitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lat", lat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lon", lon));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((METJSONForecast) ApiInvoker.deserialize(localVarResponse,  "", METJSONForecast.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Weather forecast for a specified place
   * @param lat Latitude
   * @param lon Longitude
   * @param format format code (file extension)
   * @param altitude Whole meters above sea level
   * @return METJSONForecast
  */
  public METJSONForecast completeFormatGet (Float lat, Float lon, String format, Integer altitude) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'lat' is set
    if (lat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lat' when calling completeFormatGet",
        new ApiException(400, "Missing the required parameter 'lat' when calling completeFormatGet"));
    }
    // verify the required parameter 'lon' is set
    if (lon == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lon' when calling completeFormatGet",
        new ApiException(400, "Missing the required parameter 'lon' when calling completeFormatGet"));
    }
    // verify the required parameter 'format' is set
    if (format == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'format' when calling completeFormatGet",
        new ApiException(400, "Missing the required parameter 'format' when calling completeFormatGet"));
    }

    // create path and map variables
    String path = "/complete.{format}".replaceAll("\\{" + "format" + "\\}", apiInvoker.escapeString(format.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "altitude", altitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lat", lat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lon", lon));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (METJSONForecast) ApiInvoker.deserialize(localVarResponse, "", METJSONForecast.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Weather forecast for a specified place
   * @param lat Latitude   * @param lon Longitude   * @param format format code (file extension)   * @param altitude Whole meters above sea level
  */
  public void completeFormatGet (Float lat, Float lon, String format, Integer altitude, final Response.Listener<METJSONForecast> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'lat' is set
    if (lat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lat' when calling completeFormatGet",
        new ApiException(400, "Missing the required parameter 'lat' when calling completeFormatGet"));
    }
    // verify the required parameter 'lon' is set
    if (lon == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lon' when calling completeFormatGet",
        new ApiException(400, "Missing the required parameter 'lon' when calling completeFormatGet"));
    }
    // verify the required parameter 'format' is set
    if (format == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'format' when calling completeFormatGet",
        new ApiException(400, "Missing the required parameter 'format' when calling completeFormatGet"));
    }

    // create path and map variables
    String path = "/complete.{format}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "format" + "\\}", apiInvoker.escapeString(format.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "altitude", altitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lat", lat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lon", lon));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((METJSONForecast) ApiInvoker.deserialize(localVarResponse,  "", METJSONForecast.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Weather forecast for a specified place
   * @param lat Latitude
   * @param lon Longitude
   * @param altitude Whole meters above sea level
   * @return METJSONForecast
  */
  public METJSONForecast completeGet (Float lat, Float lon, Integer altitude) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'lat' is set
    if (lat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lat' when calling completeGet",
        new ApiException(400, "Missing the required parameter 'lat' when calling completeGet"));
    }
    // verify the required parameter 'lon' is set
    if (lon == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lon' when calling completeGet",
        new ApiException(400, "Missing the required parameter 'lon' when calling completeGet"));
    }

    // create path and map variables
    String path = "/complete";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "altitude", altitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lat", lat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lon", lon));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (METJSONForecast) ApiInvoker.deserialize(localVarResponse, "", METJSONForecast.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Weather forecast for a specified place
   * @param lat Latitude   * @param lon Longitude   * @param altitude Whole meters above sea level
  */
  public void completeGet (Float lat, Float lon, Integer altitude, final Response.Listener<METJSONForecast> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'lat' is set
    if (lat == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lat' when calling completeGet",
        new ApiException(400, "Missing the required parameter 'lat' when calling completeGet"));
    }
    // verify the required parameter 'lon' is set
    if (lon == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lon' when calling completeGet",
        new ApiException(400, "Missing the required parameter 'lon' when calling completeGet"));
    }

    // create path and map variables
    String path = "/complete".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "altitude", altitude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lat", lat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lon", lon));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((METJSONForecast) ApiInvoker.deserialize(localVarResponse,  "", METJSONForecast.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Weather forecast for a specified place
   * @param format format code (file extension)
   * @return String
  */
  public String statusFormatGet (String format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'format' is set
    if (format == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'format' when calling statusFormatGet",
        new ApiException(400, "Missing the required parameter 'format' when calling statusFormatGet"));
    }

    // create path and map variables
    String path = "/status.{format}".replaceAll("\\{" + "format" + "\\}", apiInvoker.escapeString(format.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Weather forecast for a specified place
   * @param format format code (file extension)
  */
  public void statusFormatGet (String format, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'format' is set
    if (format == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'format' when calling statusFormatGet",
        new ApiException(400, "Missing the required parameter 'format' when calling statusFormatGet"));
    }

    // create path and map variables
    String path = "/status.{format}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "format" + "\\}", apiInvoker.escapeString(format.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Weather forecast for a specified place
   * @return String
  */
  public String statusGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/status";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Weather forecast for a specified place

  */
  public void statusGet (final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/status".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
