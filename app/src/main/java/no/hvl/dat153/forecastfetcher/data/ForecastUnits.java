/**
 * Locationforecast
 * Weather forecast for a specified place
 *
 * The version of the OpenAPI document: 2.0
 * Contact: weatherapi-adm@met.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package no.hvl.dat153.forecastfetcher.data;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class ForecastUnits {
  
  @SerializedName("air_pressure_at_sea_level")
  private String airPressureAtSeaLevel = null;
  @SerializedName("air_temperature")
  private String airTemperature = null;
  @SerializedName("air_temperature_max")
  private String airTemperatureMax = null;
  @SerializedName("air_temperature_min")
  private String airTemperatureMin = null;
  @SerializedName("cloud_area_fraction")
  private String cloudAreaFraction = null;
  @SerializedName("cloud_area_fraction_high")
  private String cloudAreaFractionHigh = null;
  @SerializedName("cloud_area_fraction_low")
  private String cloudAreaFractionLow = null;
  @SerializedName("cloud_area_fraction_medium")
  private String cloudAreaFractionMedium = null;
  @SerializedName("dew_point_temperature")
  private String dewPointTemperature = null;
  @SerializedName("fog_area_fraction")
  private String fogAreaFraction = null;
  @SerializedName("precipitation_amount")
  private String precipitationAmount = null;
  @SerializedName("precipitation_amount_max")
  private String precipitationAmountMax = null;
  @SerializedName("precipitation_amount_min")
  private String precipitationAmountMin = null;
  @SerializedName("probability_of_precipitation")
  private String probabilityOfPrecipitation = null;
  @SerializedName("probability_of_thunder")
  private String probabilityOfThunder = null;
  @SerializedName("relative_humidity")
  private String relativeHumidity = null;
  @SerializedName("ultraviolet_index_clear_sky_max")
  private String ultravioletIndexClearSkyMax = null;
  @SerializedName("wind_from_direction")
  private String windFromDirection = null;
  @SerializedName("wind_speed")
  private String windSpeed = null;
  @SerializedName("wind_speed_of_gust")
  private String windSpeedOfGust = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public String getAirPressureAtSeaLevel() {
    return airPressureAtSeaLevel;
  }
  public void setAirPressureAtSeaLevel(String airPressureAtSeaLevel) {
    this.airPressureAtSeaLevel = airPressureAtSeaLevel;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getAirTemperature() {
    return airTemperature;
  }
  public void setAirTemperature(String airTemperature) {
    this.airTemperature = airTemperature;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getAirTemperatureMax() {
    return airTemperatureMax;
  }
  public void setAirTemperatureMax(String airTemperatureMax) {
    this.airTemperatureMax = airTemperatureMax;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getAirTemperatureMin() {
    return airTemperatureMin;
  }
  public void setAirTemperatureMin(String airTemperatureMin) {
    this.airTemperatureMin = airTemperatureMin;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getCloudAreaFraction() {
    return cloudAreaFraction;
  }
  public void setCloudAreaFraction(String cloudAreaFraction) {
    this.cloudAreaFraction = cloudAreaFraction;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getCloudAreaFractionHigh() {
    return cloudAreaFractionHigh;
  }
  public void setCloudAreaFractionHigh(String cloudAreaFractionHigh) {
    this.cloudAreaFractionHigh = cloudAreaFractionHigh;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getCloudAreaFractionLow() {
    return cloudAreaFractionLow;
  }
  public void setCloudAreaFractionLow(String cloudAreaFractionLow) {
    this.cloudAreaFractionLow = cloudAreaFractionLow;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getCloudAreaFractionMedium() {
    return cloudAreaFractionMedium;
  }
  public void setCloudAreaFractionMedium(String cloudAreaFractionMedium) {
    this.cloudAreaFractionMedium = cloudAreaFractionMedium;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getDewPointTemperature() {
    return dewPointTemperature;
  }
  public void setDewPointTemperature(String dewPointTemperature) {
    this.dewPointTemperature = dewPointTemperature;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getFogAreaFraction() {
    return fogAreaFraction;
  }
  public void setFogAreaFraction(String fogAreaFraction) {
    this.fogAreaFraction = fogAreaFraction;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getPrecipitationAmount() {
    return precipitationAmount;
  }
  public void setPrecipitationAmount(String precipitationAmount) {
    this.precipitationAmount = precipitationAmount;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getPrecipitationAmountMax() {
    return precipitationAmountMax;
  }
  public void setPrecipitationAmountMax(String precipitationAmountMax) {
    this.precipitationAmountMax = precipitationAmountMax;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getPrecipitationAmountMin() {
    return precipitationAmountMin;
  }
  public void setPrecipitationAmountMin(String precipitationAmountMin) {
    this.precipitationAmountMin = precipitationAmountMin;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getProbabilityOfPrecipitation() {
    return probabilityOfPrecipitation;
  }
  public void setProbabilityOfPrecipitation(String probabilityOfPrecipitation) {
    this.probabilityOfPrecipitation = probabilityOfPrecipitation;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getProbabilityOfThunder() {
    return probabilityOfThunder;
  }
  public void setProbabilityOfThunder(String probabilityOfThunder) {
    this.probabilityOfThunder = probabilityOfThunder;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getRelativeHumidity() {
    return relativeHumidity;
  }
  public void setRelativeHumidity(String relativeHumidity) {
    this.relativeHumidity = relativeHumidity;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getUltravioletIndexClearSkyMax() {
    return ultravioletIndexClearSkyMax;
  }
  public void setUltravioletIndexClearSkyMax(String ultravioletIndexClearSkyMax) {
    this.ultravioletIndexClearSkyMax = ultravioletIndexClearSkyMax;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getWindFromDirection() {
    return windFromDirection;
  }
  public void setWindFromDirection(String windFromDirection) {
    this.windFromDirection = windFromDirection;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getWindSpeed() {
    return windSpeed;
  }
  public void setWindSpeed(String windSpeed) {
    this.windSpeed = windSpeed;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getWindSpeedOfGust() {
    return windSpeedOfGust;
  }
  public void setWindSpeedOfGust(String windSpeedOfGust) {
    this.windSpeedOfGust = windSpeedOfGust;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastUnits forecastUnits = (ForecastUnits) o;
    return (this.airPressureAtSeaLevel == null ? forecastUnits.airPressureAtSeaLevel == null : this.airPressureAtSeaLevel.equals(forecastUnits.airPressureAtSeaLevel)) &&
        (this.airTemperature == null ? forecastUnits.airTemperature == null : this.airTemperature.equals(forecastUnits.airTemperature)) &&
        (this.airTemperatureMax == null ? forecastUnits.airTemperatureMax == null : this.airTemperatureMax.equals(forecastUnits.airTemperatureMax)) &&
        (this.airTemperatureMin == null ? forecastUnits.airTemperatureMin == null : this.airTemperatureMin.equals(forecastUnits.airTemperatureMin)) &&
        (this.cloudAreaFraction == null ? forecastUnits.cloudAreaFraction == null : this.cloudAreaFraction.equals(forecastUnits.cloudAreaFraction)) &&
        (this.cloudAreaFractionHigh == null ? forecastUnits.cloudAreaFractionHigh == null : this.cloudAreaFractionHigh.equals(forecastUnits.cloudAreaFractionHigh)) &&
        (this.cloudAreaFractionLow == null ? forecastUnits.cloudAreaFractionLow == null : this.cloudAreaFractionLow.equals(forecastUnits.cloudAreaFractionLow)) &&
        (this.cloudAreaFractionMedium == null ? forecastUnits.cloudAreaFractionMedium == null : this.cloudAreaFractionMedium.equals(forecastUnits.cloudAreaFractionMedium)) &&
        (this.dewPointTemperature == null ? forecastUnits.dewPointTemperature == null : this.dewPointTemperature.equals(forecastUnits.dewPointTemperature)) &&
        (this.fogAreaFraction == null ? forecastUnits.fogAreaFraction == null : this.fogAreaFraction.equals(forecastUnits.fogAreaFraction)) &&
        (this.precipitationAmount == null ? forecastUnits.precipitationAmount == null : this.precipitationAmount.equals(forecastUnits.precipitationAmount)) &&
        (this.precipitationAmountMax == null ? forecastUnits.precipitationAmountMax == null : this.precipitationAmountMax.equals(forecastUnits.precipitationAmountMax)) &&
        (this.precipitationAmountMin == null ? forecastUnits.precipitationAmountMin == null : this.precipitationAmountMin.equals(forecastUnits.precipitationAmountMin)) &&
        (this.probabilityOfPrecipitation == null ? forecastUnits.probabilityOfPrecipitation == null : this.probabilityOfPrecipitation.equals(forecastUnits.probabilityOfPrecipitation)) &&
        (this.probabilityOfThunder == null ? forecastUnits.probabilityOfThunder == null : this.probabilityOfThunder.equals(forecastUnits.probabilityOfThunder)) &&
        (this.relativeHumidity == null ? forecastUnits.relativeHumidity == null : this.relativeHumidity.equals(forecastUnits.relativeHumidity)) &&
        (this.ultravioletIndexClearSkyMax == null ? forecastUnits.ultravioletIndexClearSkyMax == null : this.ultravioletIndexClearSkyMax.equals(forecastUnits.ultravioletIndexClearSkyMax)) &&
        (this.windFromDirection == null ? forecastUnits.windFromDirection == null : this.windFromDirection.equals(forecastUnits.windFromDirection)) &&
        (this.windSpeed == null ? forecastUnits.windSpeed == null : this.windSpeed.equals(forecastUnits.windSpeed)) &&
        (this.windSpeedOfGust == null ? forecastUnits.windSpeedOfGust == null : this.windSpeedOfGust.equals(forecastUnits.windSpeedOfGust));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.airPressureAtSeaLevel == null ? 0: this.airPressureAtSeaLevel.hashCode());
    result = 31 * result + (this.airTemperature == null ? 0: this.airTemperature.hashCode());
    result = 31 * result + (this.airTemperatureMax == null ? 0: this.airTemperatureMax.hashCode());
    result = 31 * result + (this.airTemperatureMin == null ? 0: this.airTemperatureMin.hashCode());
    result = 31 * result + (this.cloudAreaFraction == null ? 0: this.cloudAreaFraction.hashCode());
    result = 31 * result + (this.cloudAreaFractionHigh == null ? 0: this.cloudAreaFractionHigh.hashCode());
    result = 31 * result + (this.cloudAreaFractionLow == null ? 0: this.cloudAreaFractionLow.hashCode());
    result = 31 * result + (this.cloudAreaFractionMedium == null ? 0: this.cloudAreaFractionMedium.hashCode());
    result = 31 * result + (this.dewPointTemperature == null ? 0: this.dewPointTemperature.hashCode());
    result = 31 * result + (this.fogAreaFraction == null ? 0: this.fogAreaFraction.hashCode());
    result = 31 * result + (this.precipitationAmount == null ? 0: this.precipitationAmount.hashCode());
    result = 31 * result + (this.precipitationAmountMax == null ? 0: this.precipitationAmountMax.hashCode());
    result = 31 * result + (this.precipitationAmountMin == null ? 0: this.precipitationAmountMin.hashCode());
    result = 31 * result + (this.probabilityOfPrecipitation == null ? 0: this.probabilityOfPrecipitation.hashCode());
    result = 31 * result + (this.probabilityOfThunder == null ? 0: this.probabilityOfThunder.hashCode());
    result = 31 * result + (this.relativeHumidity == null ? 0: this.relativeHumidity.hashCode());
    result = 31 * result + (this.ultravioletIndexClearSkyMax == null ? 0: this.ultravioletIndexClearSkyMax.hashCode());
    result = 31 * result + (this.windFromDirection == null ? 0: this.windFromDirection.hashCode());
    result = 31 * result + (this.windSpeed == null ? 0: this.windSpeed.hashCode());
    result = 31 * result + (this.windSpeedOfGust == null ? 0: this.windSpeedOfGust.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastUnits {\n");
    
    sb.append("  airPressureAtSeaLevel: ").append(airPressureAtSeaLevel).append("\n");
    sb.append("  airTemperature: ").append(airTemperature).append("\n");
    sb.append("  airTemperatureMax: ").append(airTemperatureMax).append("\n");
    sb.append("  airTemperatureMin: ").append(airTemperatureMin).append("\n");
    sb.append("  cloudAreaFraction: ").append(cloudAreaFraction).append("\n");
    sb.append("  cloudAreaFractionHigh: ").append(cloudAreaFractionHigh).append("\n");
    sb.append("  cloudAreaFractionLow: ").append(cloudAreaFractionLow).append("\n");
    sb.append("  cloudAreaFractionMedium: ").append(cloudAreaFractionMedium).append("\n");
    sb.append("  dewPointTemperature: ").append(dewPointTemperature).append("\n");
    sb.append("  fogAreaFraction: ").append(fogAreaFraction).append("\n");
    sb.append("  precipitationAmount: ").append(precipitationAmount).append("\n");
    sb.append("  precipitationAmountMax: ").append(precipitationAmountMax).append("\n");
    sb.append("  precipitationAmountMin: ").append(precipitationAmountMin).append("\n");
    sb.append("  probabilityOfPrecipitation: ").append(probabilityOfPrecipitation).append("\n");
    sb.append("  probabilityOfThunder: ").append(probabilityOfThunder).append("\n");
    sb.append("  relativeHumidity: ").append(relativeHumidity).append("\n");
    sb.append("  ultravioletIndexClearSkyMax: ").append(ultravioletIndexClearSkyMax).append("\n");
    sb.append("  windFromDirection: ").append(windFromDirection).append("\n");
    sb.append("  windSpeed: ").append(windSpeed).append("\n");
    sb.append("  windSpeedOfGust: ").append(windSpeedOfGust).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
